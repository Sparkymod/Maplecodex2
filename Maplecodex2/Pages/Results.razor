@using Maplecodex2.Data
@using Maplecodex2.Data.Services
@using Maplecodex2.Data.Models
@using Maplecodex2.Data.Helpers
@using Maplecodex2.Database.Core

@inject ItemService ItemService

@page "/"

<!-- Logo -->
<nav class="container navbar navbar-light">
    <a><img src=/site_logo.png /></a>
</nav>

<!-- Container results. -->
<div class="container">
    <div class="form-inline">
        <!-- Search -->
        <form>
            <input class="form-control mr-sm-2" @bind-value=SearchId @bind-value:event="oninput" onclick=@SearchItemAsync() type="search" placeholder="type id, e.g 10200001" aria-label="Search">
            <!-- Button trigger modal -->
            <span class="btn btn-default"> Search </span>

            <label style="padding-left: 1vh;"> Show
                <select aria-controls="ItemTable" class="form-inline input-sm">
                    <option value="10">10</option>
                    <option value="25">25</option>
                    <option value="50">50</option>
                </select>
            </label>

        </form>
    </div>
    <!-- Item Datatable -->
    <div class="" style="width: auto;" id="ItemTable_Wrapper">
        <table class="table table-responsive table-striped table-bordered dataTable dtr-inline pagination justify-content-center" id="ItemTable">
            <thead>
                <tr role="row">
                    <th class="" rowspan="1" colspan="1">Icon</th>
                    <th class="sorting" rowspan="1" colspan="1">ID</th>
                    <th class="sorting" rowspan="1" colspan="1">Type</th>
                    <th class="sorting" rowspan="1" colspan="1">Name</th>
                    <th class="sorting" rowspan="1" colspan="1">Feature</th>
                    <th class="sorting" rowspan="1" colspan="1">Category</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Item newItem in ItemList)
                {
                    <tr role="row">
                        @if (string.IsNullOrEmpty(@newItem.Icon))
                        {
                            <td class="col-xs-1"><img src="icon0.png" width="30vh" height="30vh" /> </td>
                        }
                        else
                        {
                            <td class="col-xs-1"> <img src="@newItem?.Icon" width="30vh" height="30vh" /> </td>
                        }
                        <td class="col-xs-1">@newItem?.Id</td>
                        <td class="col-xs-1">@newItem?.Type</td>
                        <td class="col-xs-5">@newItem?.Name</td>
                        <td class="col-xs-1">@newItem?.Feature</td>
                        <td class="col-xs-1">@newItem?.Category</td>
                    </tr>
                }
            </tbody>
        </table>
        <!-- Pagination -->
        <nav>
            <ul class="pagination pagination-sm justify-content-center">
                @foreach (PagingLink link in Links)
                {
                    <li @onclick="() => OnSelectedPage(link)" style="cursor: pointer;" class="page-item @(link.Active ? "active" : null)">
                        <span class="btn-toolbar" href="#">@link.Text</span>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

@code {
    private int SearchId { get; set; }
    public List<Item>? ItemList { get; set; } = new List<Item>();
    public PagedList<Item>? PagedLists;
    public List<PagingLink> Links = new List<PagingLink>();
    public int PageSize = 10;

    // Initializer
    protected override async Task OnInitializedAsync()
    {
        PagedLists = await ItemService.GetItemPerPage(1, PageSize);
        ItemList = PagedLists.Items;
        Links = DataHelper.CreatePaginationLinks(PagedLists, 5);
    }

    // This is called by the pagination nav
    public async Task OnSelectedPage(PagingLink link)
    {
        if (link.Page == PagedLists.CurrentPage || !link.Enabled) { return; }

        PagedLists.CurrentPage = link.Page;
        PagedLists = await ItemService.GetItemPerPage(link.Page, PageSize);
        ItemList = PagedLists.Items;
        Links = DataHelper.CreatePaginationLinks(PagedLists, 5);
    }

    // TODO: Search for item in the list that match the id
    public async Task SearchItemAsync()
    {

    }

    public async Task GetAllItems(int page)
    {
        List<Item> tempList = await ItemService.GetAll();
        ItemList = tempList.Take(page).ToList();
    }
}