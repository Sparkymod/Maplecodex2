@page "/item/{Id:int}"
@using Maple2.File.Parser.Xml.Item
@using Maplecodex2.Data.Models
@using Maplecodex2.Data.Services
@using static Maple2.File.Parser.Xml.Item.Slot

<div class="card2-flex">
    <div class="card2 ">
        <!-- Title for the post -->
        <div class="card2-header">
            <div class="rarity-selector">
                <span class="name @SetRarityCSS(_selectRarity)">@CurrentItem.Info.Name</span>
                @if (CurrentItem.Info.Rarities != null)
                {
                    <select @bind="@_selectRarity">
                        @foreach (int? rarity in CurrentItem.Info.Rarities)
                        {
                            <option value="@rarity">@SetRarityCSS(rarity)</option>
                        }
                    </select>
                }
            </div>
            <span class="star @SetRarityCSS(_selectRarity)">★☆☆☆☆☆</span>
            <div class="info">
                <img class="header-style shadow-style rarity @SetRarityCSS(_selectRarity)" src="@GetIcon()" alt="">
                <div class="info-details">
                    <span class="id">ID: @CurrentItem.Info.Id</span>
                    @if (!string.IsNullOrEmpty(CurrentItem.Info.MainDescription))
                    {
                        <span class="gear">@CurrentItem.Info.MainDescription</span>
                    }
                    else
                    {
                        <span class="gear">Item</span>
                    }
                    <span class="number @SetRarityCSS(_selectRarity)"></span>
                </div>
            </div>
            <div class="info-details">
                <span class="gear">Gear Score <span class="gear" style="color: blue;">{#}</span></span>
                <span class="level">Require Level <span class="gear" style="color: blue;">{#}</span></span>
                <span class="weapon_type">@CurrentItem.Info.Type</span>
            </div>
        </div>

        <div class="card2-content">
            @if (!string.IsNullOrEmpty(CurrentItem.Info.ToolDescription))
            {
                <span>@CurrentItem.Info.ToolDescription</span>
            }
            @if (!string.IsNullOrEmpty(CurrentItem.Info.GuideDescription))
            {
                <div class="item">
                    <span>@CurrentItem.Info.GuideDescription</span>
                </div>

            }
        </div>
        <!-- Footer for the post -->
        <div class="card2-footer">
            <img src="img/info-48.png" alt="">
            <button @onclick="( () => _isLoading = !_isLoading)"><b>More info</b></button>
        </div>
        @if (_isLoading)
        {
            <!-- Content for the post -->
            <!-- We can have as many span for contents as we want -->
            <div class="card2-content">
                @RenderBasic
                <hr />
                @RenderSlots
                <hr />
                @RenderMutation
                <hr />
                @RenderCutting
                <hr />
                @RenderInstall
                <hr />
                @RenderProperty
                <hr />
                @RenderMaterial
                <hr />
                @RenderLife
                <hr />
                @RenderLimit
                <hr />
                @RenderSkill
                <hr />
                @RenderObjSkill
                <hr />
                @RenderTitle
                <hr />
                @RenderDrop
                <hr />
                @RenderUCC
                @RenderEffect
                <hr />
                @RenderFusion
                <hr />
                @RenderPet
                <hr />
                @RenderRide
                <hr />
                @RenderBadge
                <hr />
                @RenderAdditionalEffect
                <hr />
                @RenderFunction
                <hr />
                @RenderTool
                <hr />
                @RenderOption
                <hr />
                @RenderMaid
                <hr />
                @RenderPCBang
                <hr />
                @RenderMusicScore
                <hr />
                @RenderHousing
            </div>
        }
    </div>
</div>

@code {
    private bool _loadSlots;

    private RenderFragment RenderBasic => __builder =>
            {
                <div>
                    <span>Basic</span>
                    <div class="item">
                        <span>friendly: <span class="number"> @CurrentItem.Data.basic.friendly </span></span>
                        <span>originID: <span class="number"> @CurrentItem.Data.basic.originID </span></span>
                        <span>stringTag: <span class="number">@CurrentItem.Data.basic.stringTag</span></span>
                    </div>
                </div>
            };

    private RenderFragment RenderSlots => __builder =>
    {
        <div>
            <span>Slots</span>
            <div class="item">
                <span style="color: green;" @onclick="( () => _loadSlots = !_loadSlots)" type="button">Slots found: <span class="number">@CurrentItem.Data.slots.slot.Count</span></span>
                @if (_loadSlots)
                {
                    @foreach (var slot in CurrentItem.Data.slots.slot)
                    {
                        <span>name: <span class="number">@slot.name</span></span>
                        <span>assets: <span class="number">~</span></span>
                        <span>scale: <span class="number">~</span></span>
                        <span>Decal:</span>
                        <div class="item nested-item">
                            @foreach (var field in typeof(Decal).GetFields())
                            {
                                var data = field.GetValue(slot.decal);
                                <span>@field.Name: <span class="number">@data </span></span>
                            }
                        </div>
                    }
                }
            </div>
        </div>
    };

    private RenderFragment RenderMutation => __builder =>
    {
        <div>
            <span>Mutation</span>
            <div class="item">
                <span>interval <span class="number">@CurrentItem.Data.mutation.interval</span></span>
                <span>changeeffect <span class="number">@CurrentItem.Data.mutation.changeeffect</span></span>
                @foreach (var asset in CurrentItem.Data.mutation.assets)
                {
                    <span>asset: <span class="number">@asset</span></span>
                }
                @foreach (var skill in CurrentItem.Data.mutation.skills)
                {
                    <span>skill: <span class="number">@skill</span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderCutting => __builder =>
    {
        <div>
            <span>Cutting</span>
            <div class="item">
                @foreach (var thisMesh in @CurrentItem.Data.cutting.mesh)
                {
                    <span>name: <span class="number"> @thisMesh.name </span></span>
                    <span>gender: <span class="number"> @thisMesh.gender </span></span>
                }

            </div>
        </div>
    };

    private RenderFragment RenderInstall => __builder =>
    {
        <div>
            <span>Install</span>
            <div class="item">
                @foreach (var field in typeof(Install).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.install);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderProperty => __builder =>
    {
        <div>
            <span>Property</span>
            <div class="item">
                @foreach (var field in typeof(Property).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.property);
                    if (data is Property.Sell)
                    {
                        <div class="item nested-item">
                            @foreach (var field2 in typeof(Property.Sell).GetFields())
                            {
                                var data2 = field2.GetValue(data);
                                <span>@field2.Name: <span class="number">@data2 </span></span>
                            }
                        </div>
                    }
                    if (data is Property.Exp)
                    {
                        <div class="item nested-item">
                            @foreach (var field2 in typeof(Property.Exp).GetFields())
                            {
                                var data2 = field2.GetValue(data);
                                <span>@field2.Name: <span class="number">@data2 </span></span>
                            }
                        </div>
                    }
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderMaterial => __builder =>
    {
        <div>
            <span>Material</span>
            <div class="item">
                @foreach (var field in typeof(Material).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.material);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderLife => __builder =>
    {
        <div>
            <span>Life</span>
            <div class="item">
                @foreach (var field in typeof(Life).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.life);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderLimit => __builder =>
    {
        <div>
            <span>Limit</span>
            <div class="item">
                @foreach (var field in typeof(Limit).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.limit);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderSkill => __builder =>
    {
        <div>
            <span>Skill</span>
            <div class="item">
                @foreach (var field in typeof(Skill).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.skill);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderObjSkill => __builder =>
    {
        <div>
            <span>Object Weapon Skill</span>
            <div class="item">
                @foreach (var field in typeof(Skill).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.objectWeaponSkill);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderTitle => __builder =>
    {
        <div>
            <span>Title</span>
            <div class="item">
                @foreach (var field in typeof(Title).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.title);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderDrop => __builder =>
    {
        <div>
            <span>Drop</span>
            <div class="item">
                @foreach (var field in typeof(Drop).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.drop);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderUCC => __builder =>
    {
        <div>
            <span>UCC</span>
            <div class="item">
                @foreach (var field in typeof(UCC).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.ucc);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderEffect => __builder =>
    {
        <div>
            <span>Effect</span>
            <div class="item">
                @foreach (var field in typeof(Effect).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.effect);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderFusion => __builder =>
    {
        <div>
            <span>Fusion</span>
            <div class="item">
                @foreach (var field in typeof(Fusion).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.fusion);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderPet => __builder =>
    {
        <div>
            <span>Pet</span>
            <div class="item">
                @foreach (var field in typeof(Pet).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.pet);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderRide => __builder =>
    {
        <div>
            <span>Ride</span>
            <div class="item">
                @foreach (var field in typeof(Ride).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.ride);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderBadge => __builder =>
    {
        <div>
            <span>Badge</span>
            <div class="item">
                @foreach (var field in typeof(Badge).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.gem);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderAdditionalEffect => __builder =>
    {
        <div>
            <span>Additional Effect</span>
            <div class="item">
                @foreach (var field in typeof(AdditionalEffect).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.AdditionalEffect);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderFunction => __builder =>
    {
        <div>
            <span>Function</span>
            <div class="item">
                @foreach (var field in typeof(Function).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.function);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderTool => __builder =>
    {
        <div>
            <span>Tool</span>
            <div class="item">
                @foreach (var field in typeof(Tool).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.tool);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderOption => __builder =>
    {
        <div>
            <span>Option</span>
            <div class="item">
                @foreach (var field in typeof(Option).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.option);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderMaid => __builder =>
    {
        <div>
            <span>Maid</span>
            <div class="item">
                @foreach (var field in typeof(Maid).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.maid);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderPCBang => __builder =>
    {
        <div>
            <span>PCBang</span>
            <div class="item">
                @foreach (var field in typeof(PCBang).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.PCBang);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderMusicScore => __builder =>
    {
        <div>
            <span>Music Score</span>
            <div class="item">
                @foreach (var field in typeof(MusicScore).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.MusicScore);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderHousing => __builder =>
    {
        <div>
            <span>Housing</span>
            <div class="item">
                @foreach (var field in typeof(Housing).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.housing);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };

    private RenderFragment RenderShop => __builder =>
    {
        <div>
            <span>Shop</span>
            <div class="item">
                @foreach (var field in typeof(Shop).GetFields())
                {
                    var data = field.GetValue(CurrentItem.Data.Shop);
                    <span>@field.Name: <span class="number">@data </span></span>
                }
            </div>
        </div>
    };
}